# coding: utf-8

"""
    OORT Agent SDK Interface

    Client interface to the OORT agent.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from oort_sdk_client.configuration import Configuration


class AdcsCommandResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'reason': 'str',
        'mode': 'str',
        'target': 'AdcsTarget',
        'vector': 'AdcsXyzFloatT',
        'quat': 'AdcsQuatT'
    }

    attribute_map = {
        'status': 'status',
        'reason': 'reason',
        'mode': 'mode',
        'target': 'target',
        'vector': 'vector',
        'quat': 'quat'
    }

    def __init__(self, status=None, reason=None, mode=None, target=None, vector=None, quat=None, local_vars_configuration=None):  # noqa: E501
        """AdcsCommandResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._reason = None
        self._mode = None
        self._target = None
        self._vector = None
        self._quat = None
        self.discriminator = None

        self.status = status
        if reason is not None:
            self.reason = reason
        self.mode = mode
        if target is not None:
            self.target = target
        if vector is not None:
            self.vector = vector
        if quat is not None:
            self.quat = quat

    @property
    def status(self):
        """Gets the status of this AdcsCommandResponse.  # noqa: E501


        :return: The status of this AdcsCommandResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AdcsCommandResponse.


        :param status: The status of this AdcsCommandResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["OK", "FAIL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def reason(self):
        """Gets the reason of this AdcsCommandResponse.  # noqa: E501


        :return: The reason of this AdcsCommandResponse.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this AdcsCommandResponse.


        :param reason: The reason of this AdcsCommandResponse.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def mode(self):
        """Gets the mode of this AdcsCommandResponse.  # noqa: E501


        :return: The mode of this AdcsCommandResponse.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this AdcsCommandResponse.


        :param mode: The mode of this AdcsCommandResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and mode is None:  # noqa: E501
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def target(self):
        """Gets the target of this AdcsCommandResponse.  # noqa: E501


        :return: The target of this AdcsCommandResponse.  # noqa: E501
        :rtype: AdcsTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this AdcsCommandResponse.


        :param target: The target of this AdcsCommandResponse.  # noqa: E501
        :type: AdcsTarget
        """

        self._target = target

    @property
    def vector(self):
        """Gets the vector of this AdcsCommandResponse.  # noqa: E501


        :return: The vector of this AdcsCommandResponse.  # noqa: E501
        :rtype: AdcsXyzFloatT
        """
        return self._vector

    @vector.setter
    def vector(self, vector):
        """Sets the vector of this AdcsCommandResponse.


        :param vector: The vector of this AdcsCommandResponse.  # noqa: E501
        :type: AdcsXyzFloatT
        """

        self._vector = vector

    @property
    def quat(self):
        """Gets the quat of this AdcsCommandResponse.  # noqa: E501


        :return: The quat of this AdcsCommandResponse.  # noqa: E501
        :rtype: AdcsQuatT
        """
        return self._quat

    @quat.setter
    def quat(self, quat):
        """Sets the quat of this AdcsCommandResponse.


        :param quat: The quat of this AdcsCommandResponse.  # noqa: E501
        :type: AdcsQuatT
        """

        self._quat = quat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdcsCommandResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdcsCommandResponse):
            return True

        return self.to_dict() != other.to_dict()
