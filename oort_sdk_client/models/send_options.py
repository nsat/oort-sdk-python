# coding: utf-8

"""
    OORT Agent SDK Interface

    Client interface to the OORT agent.  # noqa: E501

    The version of the OpenAPI document: 1.5
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from oort_sdk_client.configuration import Configuration


class SendOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ttl_params': 'TTLParams',
        'reliable': 'bool',
        'tags': 'dict(str, str)',
        'delivery_hints': 'DeliveryHints'
    }

    attribute_map = {
        'ttl_params': 'TTLParams',
        'reliable': 'reliable',
        'tags': 'tags',
        'delivery_hints': 'delivery_hints'
    }

    def __init__(self, ttl_params=None, reliable=True, tags=None, delivery_hints=None, local_vars_configuration=None):  # noqa: E501
        """SendOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ttl_params = None
        self._reliable = None
        self._tags = None
        self._delivery_hints = None
        self.discriminator = None

        if ttl_params is not None:
            self.ttl_params = ttl_params
        if reliable is not None:
            self.reliable = reliable
        if tags is not None:
            self.tags = tags
        if delivery_hints is not None:
            self.delivery_hints = delivery_hints

    @property
    def ttl_params(self):
        """Gets the ttl_params of this SendOptions.  # noqa: E501


        :return: The ttl_params of this SendOptions.  # noqa: E501
        :rtype: TTLParams
        """
        return self._ttl_params

    @ttl_params.setter
    def ttl_params(self, ttl_params):
        """Sets the ttl_params of this SendOptions.


        :param ttl_params: The ttl_params of this SendOptions.  # noqa: E501
        :type: TTLParams
        """

        self._ttl_params = ttl_params

    @property
    def reliable(self):
        """Gets the reliable of this SendOptions.  # noqa: E501

        whether to send an item reliably, i.e., with retries  # noqa: E501

        :return: The reliable of this SendOptions.  # noqa: E501
        :rtype: bool
        """
        return self._reliable

    @reliable.setter
    def reliable(self, reliable):
        """Sets the reliable of this SendOptions.

        whether to send an item reliably, i.e., with retries  # noqa: E501

        :param reliable: The reliable of this SendOptions.  # noqa: E501
        :type: bool
        """

        self._reliable = reliable

    @property
    def tags(self):
        """Gets the tags of this SendOptions.  # noqa: E501

        a structure for optional file tags  # noqa: E501

        :return: The tags of this SendOptions.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SendOptions.

        a structure for optional file tags  # noqa: E501

        :param tags: The tags of this SendOptions.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    @property
    def delivery_hints(self):
        """Gets the delivery_hints of this SendOptions.  # noqa: E501


        :return: The delivery_hints of this SendOptions.  # noqa: E501
        :rtype: DeliveryHints
        """
        return self._delivery_hints

    @delivery_hints.setter
    def delivery_hints(self, delivery_hints):
        """Sets the delivery_hints of this SendOptions.


        :param delivery_hints: The delivery_hints of this SendOptions.  # noqa: E501
        :type: DeliveryHints
        """

        self._delivery_hints = delivery_hints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SendOptions):
            return True

        return self.to_dict() != other.to_dict()
