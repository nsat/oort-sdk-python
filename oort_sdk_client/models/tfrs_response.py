# coding: utf-8

"""
    OORT Agent SDK Interface

    Client interface to the OORT agent.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from oort_sdk_client.configuration import Configuration


class TfrsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'age': 'float',
        'utc_time': 'int',
        'ecef_pos_x': 'float',
        'ecef_pos_y': 'float',
        'ecef_pos_z': 'float',
        'ecef_vel_x': 'float',
        'ecef_vel_y': 'float',
        'ecef_vel_z': 'float'
    }

    attribute_map = {
        'age': 'age',
        'utc_time': 'utc_time',
        'ecef_pos_x': 'ecef_pos_x',
        'ecef_pos_y': 'ecef_pos_y',
        'ecef_pos_z': 'ecef_pos_z',
        'ecef_vel_x': 'ecef_vel_x',
        'ecef_vel_y': 'ecef_vel_y',
        'ecef_vel_z': 'ecef_vel_z'
    }

    def __init__(self, age=None, utc_time=None, ecef_pos_x=None, ecef_pos_y=None, ecef_pos_z=None, ecef_vel_x=None, ecef_vel_y=None, ecef_vel_z=None, local_vars_configuration=None):  # noqa: E501
        """TfrsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._age = None
        self._utc_time = None
        self._ecef_pos_x = None
        self._ecef_pos_y = None
        self._ecef_pos_z = None
        self._ecef_vel_x = None
        self._ecef_vel_y = None
        self._ecef_vel_z = None
        self.discriminator = None

        self.age = age
        self.utc_time = utc_time
        self.ecef_pos_x = ecef_pos_x
        self.ecef_pos_y = ecef_pos_y
        self.ecef_pos_z = ecef_pos_z
        self.ecef_vel_x = ecef_vel_x
        self.ecef_vel_y = ecef_vel_y
        self.ecef_vel_z = ecef_vel_z

    @property
    def age(self):
        """Gets the age of this TfrsResponse.  # noqa: E501

        age of the cached value  # noqa: E501

        :return: The age of this TfrsResponse.  # noqa: E501
        :rtype: float
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this TfrsResponse.

        age of the cached value  # noqa: E501

        :param age: The age of this TfrsResponse.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and age is None:  # noqa: E501
            raise ValueError("Invalid value for `age`, must not be `None`")  # noqa: E501

        self._age = age

    @property
    def utc_time(self):
        """Gets the utc_time of this TfrsResponse.  # noqa: E501

        unix epoch time  # noqa: E501

        :return: The utc_time of this TfrsResponse.  # noqa: E501
        :rtype: int
        """
        return self._utc_time

    @utc_time.setter
    def utc_time(self, utc_time):
        """Sets the utc_time of this TfrsResponse.

        unix epoch time  # noqa: E501

        :param utc_time: The utc_time of this TfrsResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and utc_time is None:  # noqa: E501
            raise ValueError("Invalid value for `utc_time`, must not be `None`")  # noqa: E501

        self._utc_time = utc_time

    @property
    def ecef_pos_x(self):
        """Gets the ecef_pos_x of this TfrsResponse.  # noqa: E501

        ECEF X position  # noqa: E501

        :return: The ecef_pos_x of this TfrsResponse.  # noqa: E501
        :rtype: float
        """
        return self._ecef_pos_x

    @ecef_pos_x.setter
    def ecef_pos_x(self, ecef_pos_x):
        """Sets the ecef_pos_x of this TfrsResponse.

        ECEF X position  # noqa: E501

        :param ecef_pos_x: The ecef_pos_x of this TfrsResponse.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and ecef_pos_x is None:  # noqa: E501
            raise ValueError("Invalid value for `ecef_pos_x`, must not be `None`")  # noqa: E501

        self._ecef_pos_x = ecef_pos_x

    @property
    def ecef_pos_y(self):
        """Gets the ecef_pos_y of this TfrsResponse.  # noqa: E501

        ECEF Y position  # noqa: E501

        :return: The ecef_pos_y of this TfrsResponse.  # noqa: E501
        :rtype: float
        """
        return self._ecef_pos_y

    @ecef_pos_y.setter
    def ecef_pos_y(self, ecef_pos_y):
        """Sets the ecef_pos_y of this TfrsResponse.

        ECEF Y position  # noqa: E501

        :param ecef_pos_y: The ecef_pos_y of this TfrsResponse.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and ecef_pos_y is None:  # noqa: E501
            raise ValueError("Invalid value for `ecef_pos_y`, must not be `None`")  # noqa: E501

        self._ecef_pos_y = ecef_pos_y

    @property
    def ecef_pos_z(self):
        """Gets the ecef_pos_z of this TfrsResponse.  # noqa: E501

        ECEF Z position  # noqa: E501

        :return: The ecef_pos_z of this TfrsResponse.  # noqa: E501
        :rtype: float
        """
        return self._ecef_pos_z

    @ecef_pos_z.setter
    def ecef_pos_z(self, ecef_pos_z):
        """Sets the ecef_pos_z of this TfrsResponse.

        ECEF Z position  # noqa: E501

        :param ecef_pos_z: The ecef_pos_z of this TfrsResponse.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and ecef_pos_z is None:  # noqa: E501
            raise ValueError("Invalid value for `ecef_pos_z`, must not be `None`")  # noqa: E501

        self._ecef_pos_z = ecef_pos_z

    @property
    def ecef_vel_x(self):
        """Gets the ecef_vel_x of this TfrsResponse.  # noqa: E501

        ECEF X velocity  # noqa: E501

        :return: The ecef_vel_x of this TfrsResponse.  # noqa: E501
        :rtype: float
        """
        return self._ecef_vel_x

    @ecef_vel_x.setter
    def ecef_vel_x(self, ecef_vel_x):
        """Sets the ecef_vel_x of this TfrsResponse.

        ECEF X velocity  # noqa: E501

        :param ecef_vel_x: The ecef_vel_x of this TfrsResponse.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and ecef_vel_x is None:  # noqa: E501
            raise ValueError("Invalid value for `ecef_vel_x`, must not be `None`")  # noqa: E501

        self._ecef_vel_x = ecef_vel_x

    @property
    def ecef_vel_y(self):
        """Gets the ecef_vel_y of this TfrsResponse.  # noqa: E501

        ECEF Y velocity  # noqa: E501

        :return: The ecef_vel_y of this TfrsResponse.  # noqa: E501
        :rtype: float
        """
        return self._ecef_vel_y

    @ecef_vel_y.setter
    def ecef_vel_y(self, ecef_vel_y):
        """Sets the ecef_vel_y of this TfrsResponse.

        ECEF Y velocity  # noqa: E501

        :param ecef_vel_y: The ecef_vel_y of this TfrsResponse.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and ecef_vel_y is None:  # noqa: E501
            raise ValueError("Invalid value for `ecef_vel_y`, must not be `None`")  # noqa: E501

        self._ecef_vel_y = ecef_vel_y

    @property
    def ecef_vel_z(self):
        """Gets the ecef_vel_z of this TfrsResponse.  # noqa: E501

        ECEF Z velocity  # noqa: E501

        :return: The ecef_vel_z of this TfrsResponse.  # noqa: E501
        :rtype: float
        """
        return self._ecef_vel_z

    @ecef_vel_z.setter
    def ecef_vel_z(self, ecef_vel_z):
        """Sets the ecef_vel_z of this TfrsResponse.

        ECEF Z velocity  # noqa: E501

        :param ecef_vel_z: The ecef_vel_z of this TfrsResponse.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and ecef_vel_z is None:  # noqa: E501
            raise ValueError("Invalid value for `ecef_vel_z`, must not be `None`")  # noqa: E501

        self._ecef_vel_z = ecef_vel_z

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TfrsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TfrsResponse):
            return True

        return self.to_dict() != other.to_dict()
